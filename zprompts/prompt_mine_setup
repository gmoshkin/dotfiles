# mine prompt theme

prompt_mine_help () {
    cat <<'EOF'
This prompt is color-scheme-able.  You can invoke it thus:

    prompt mine [ 8bit ] [<color1> [<color2> [<color3>] [<color4>]]

where the colors are for the hyphens, current directory, user@host,
and user input bits respectively.  The default colors are cyan, green,
cyan, and white.  This theme works best with a dark background.

If you have either UTF-8 or the `nexus' or `vga' console fonts or similar,
you can specify the `8bit' option to use 8-bit replacements for the
7-bit characters.

And you probably thought adam1 was overkill ...
EOF
}

prompt_mine_setup () {
    # Some can't be local
    setopt localoptions nowarncreateglobal
    local prompt_gfx_tlc prompt_gfx_mlc prompt_gfx_blc

    prompt_gfx_tlc='╭'
    prompt_gfx_mlc='├'
    prompt_gfx_blc='╰'
    prompt_gfx_hyphen='─'

    # Colour scheme
    prompt_mine_clr_delim=${1:-'black'}
    prompt_mine_clr_cwd=${2:-'blue'}
    prompt_mine_clr_user=${3:-'green'}
    prompt_mine_clr_host=${4:-'yellow'}
    prompt_mine_clr_prompt_chr=${5:-'11'}
    prompt_mine_clr_datetime=${6:-'green'}

    local prompt_gfx_bbox
    prompt_gfx_tbox="%F{$prompt_mine_clr_delim}${prompt_gfx_tlc}"
    prompt_gfx_bbox="%F{$prompt_mine_clr_delim}${prompt_gfx_blc}"

    prompt_char="%F{$prompt_mine_clr_prompt_chr}%(!.#.$)"

    # This is a cute hack.  Well I like it, anyway.
    prompt_gfx_bbox_to_mbox=$'%{\e[A\r'"%}%F{$prompt_mine_clr_delim}${prompt_gfx_mlc}%{"$'\e[B%}'

    prompt_l_paren="%F{$prompt_mine_clr_delim}("
    prompt_r_paren="%F{$prompt_mine_clr_delim})"
    prompt_colon="%F{$prompt_mine_clr_delim}:"

    prompt_user_host="%F{$prompt_mine_clr_user}%n@%F{$prompt_mine_clr_host}%m"
    # prompt_datetime="%F{$prompt_mine_clr_datetime}%D{%a %d %b %Y %H:%M}"
    prompt_datetime="%F{$prompt_mine_clr_datetime}%D{%a %d %b %Y %H:%M}"

    prompt_line_1a="${prompt_gfx_tbox}${prompt_l_paren}${prompt_user_host}"
    prompt_line_1b="${prompt_l_paren}${prompt_datetime}${prompt_r_paren}"

    prompt_line_2="$prompt_gfx_bbox"

    prompt_opts=(cr subst percent)

    add-zsh-hook precmd prompt_mine_precmd
}

prompt_mine_precmd() {
    setopt localoptions extendedglob noxtrace nowarncreateglobal
    local prompt_line_1
    local prompt_cwd

    local tmp_pwd="%~"
    prompt_cwd="%F{$prompt_mine_clr_cwd}${${(%%)tmp_pwd}/#\/space\/$USER/⌂}"

    prompt_mine_choose_prompt

    PS1="$prompt_line_1$prompt_newline$prompt_line_2${prompt_char} %f%k"
    PS2="$prompt_line_2$prompt_gfx_bbox_to_mbox%F{$prompt_mine_clr_prompt_chr}%_> %f%k"
    PS3="$prompt_line_2$prompt_gfx_bbox_to_mbox%F{$prompt_mine_clr_prompt_chr}?# %f%k"
}

prompt_mine_choose_prompt () {
    local tmp_line_1a="${prompt_line_1a}${prompt_colon}${prompt_cwd}${prompt_r_paren}"
    local line_1a_without_cwd_width=${#${(S%%)prompt_line_1a//(\%([KF1]|)\{*\}|\%[Bkf])}}
    local prompt_line_1a_width=${#${(S%%)tmp_line_1a//(\%([KF1]|)\{*\}|\%[Bkf])}}
    local prompt_line_1b_width=${#${(S%%)prompt_line_1b//(\%([KF1]|)\{*\}|\%[Bkf])}}

    local padding_size=$((COLUMNS - prompt_line_1a_width - prompt_line_1b_width))

    # Try to fit in long path and user@host.
    if (( padding_size >= 0 )); then
        local prompt_padding
        eval "prompt_padding=\${(l:${padding_size}::${prompt_gfx_hyphen}:)}"
        prompt_line_1="$tmp_line_1a$prompt_padding$prompt_line_1b"
        return
    fi

    padding_size=$((COLUMNS - line_1a_without_cwd_width - prompt_line_1b_width - 2))

    echo $COLUMNS - $line_1a_without_cwd_width - $prompt_line_1b_width = $padding_size > /tmp/padding_size
    # Didn't fit; try to truncate.
    if (( padding_size > 0 )); then
        local truncated_cwd="%F{${prompt_mine_clr_cwd}}$(print -P "%${padding_size}<⋯ <${prompt_cwd}")"
        prompt_line_1="${prompt_line_1a}${prompt_colon}${truncated_cwd}${prompt_r_paren}${prompt_line_1b}"
        return
    fi

    # Still didn't fit; forget about it
    prompt_line_1="${prompt_line_1a}${prompt_r_paren}"
}

prompt_mine_setup "$@"
