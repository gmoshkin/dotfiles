# enabling 256 color output
set -g default-terminal "screen-256color"

# for focus autocommands in vim
set -g focus-events on

# guess what that does
set-window-option -g mode-keys vi
# vi mode is perfect for navigating large amounts of text lines but for command
# line editing there's nothing better than emacs mode
set-window-option -g status-keys emacs

# allows using modifiers (Shift, Ctrl, Alt) with function keys
set-window-option -g xterm-keys on

# enabling C-s mappings in vim
unbind C-s
unbind -n C-s

# rebing prefix key
unbind C-b
set -g prefix C-q
bind C-Space send-prefix

# status bar customization
# set -g status-utf8 on
# set -g status-bg black
# set -g status-fg white
# set -g status-interval 5
# set -g status-left-length 90
# set -g status-right-length 60
# set -g status-left "#[fg=green]#(whoami)#[fg=white]::#[fg=blue]\
# #(hostname -s)#[fg=white]::##[fg=yellow]#(curl ipecho.net/plain;echo)"
# set -g status-justify left
# set -g status-right '#[fg=Cyan]#S #[fg=white]%a %d %b %R'

set -g status-bg black
set -g status-fg colour10

# powerline statusbar
set-option -g status on
set-option -g status-interval 2
set-option -g status-utf8 on
set-option -g status-justify "centre"
set-option -g status-left-length 120
set-option -g status-right-length 120
set-option -g status-left "#(~/dotfiles/tmux-powerline/powerline.sh left)"
set-option -g status-right "#(~/dotfiles/tmux-powerline/powerline.sh right)"

# set-window-option -g window-status-current-format "#[fg=colour10, bg=black]\
# #[fg=white,bold, bg=colour10] #I:#W #[fg=colour10, bg=black]"
set-window-option -g window-status-current-format "#[fg=white,bold, bg=black]\
 #I:#W #[fg=colour10, bg=black]"
set-window-option -g window-status-format "#[fg=colour10, bg=black] #I:#W "
# set-window-option -g window-status-separator ""

# copy to system clipboard with y in vi-copy mode
bind -t vi-copy y copy-pipe 'cat | xsel -ib'

# remap visual mode mappings to be more like vi
bind -t vi-copy v begin-selection
bind -t vi-copy C-v rectangle-toggle
bind -t vi-copy Space clear-selection

# pane navigation
bind-key C-k select-pane -U\; refresh-client -S
bind-key C-j select-pane -D\; refresh-client -S
bind-key C-h select-pane -L\; refresh-client -S
bind-key C-l select-pane -R\; refresh-client -S

# pane resizing
bind-key -r + resize-pane -U
bind-key -r - resize-pane -D
bind-key -r < resize-pane -L
bind-key -r > resize-pane -R

# window navigation
bind-key -r C-n next-window\; refresh-client -S
bind-key -r C-p previous-window\; refresh-client -S

# session navigation
bind-key -r ( switch-client -p\; refresh-client -S
bind-key -r ) switch-client -n\; refresh-client -S

# easy copy-mode entrance
bind-key C-y copy-mode
bind-key C-u copy-mode
bind-key C-b copy-mode

# pane border color
set-option -g pane-active-border-fg blue

# update powerline segments by deleting tmp files
bind-key u run-shell "rm -r /tmp/tmux-powerline_$USER"\; refresh-client -S

# don't wrap search around the end of pane
# set-option wrap-search off

# synchronise panes shortcut
bind-key S setw synchronize-panes

# switch ; and : key bindings in correspondence to my vim's setup
bind-key \; command-prompt
bind-key : last-pane

# custom window layout
bind-key M-6 split-window -v -p 35\;\
             split-window -h -p 67\;\
             split-window -h -p 50

bind-key M-7 split-window -h -p 67\;\
             split-window -h -p 50

# pipe the output from the pane to a file
bind-key P pipe-pane -o 'cat >>/tmp/tmux-output-#S:#I.#P'

# load local config if it's there
if-shell '[ -f ~/.tmux-local.conf ]'\
         'source-file ~/.tmux-local.conf'

# load version specific config
if-shell '~/dotfiles/scripts/tmuxversion.sh 2.1'\
         'source-file ~/dotfiles/tmux-new.conf'\
         'source-file ~/dotfiles/tmux-old.conf'
