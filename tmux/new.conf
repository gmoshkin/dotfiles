# after 2.1

#enable mouse support
set -g mouse on

bind-key C-m send-keys -t '.{last}' C-p C-m
bind-key C-c send-keys -t '.{last}' C-p C-c

bind-key \' send-keys "'\\''"

# `tmux echo` alias
run-shell '~/dotfiles/tmux/append-option command-alias "echo=display -p"'

# Fix the absolutely moronic default behavior of mouse selection to turn off the
# copy mode once the mouse button is released. It's still not good, because it
# still removes the selection, but at least it's better.
#
# Also look at these garbage key bindings. I just copied them from the defaults
# with just the `copy-pipe-and-cancel` being replaced with `copy-pipe`.
# Imagine hacking in crutches for mouse support only to force yourself to
# implement it by these ugly ass command sequences. Thanks for not hard coding
# this stupid behavior completely, I guess.
#
# Tmux is pretty good in the functionality it provides, but configuration is
# just a joke, come on.
bind-key -T copy-mode    MouseDragEnd1Pane send-keys -X copy-pipe
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe

bind-key -T root         DoubleClick1Pane  select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M  } { copy-mode -H ; send-keys -X select-word ; run-shell -d 0.3 ; send-keys -X copy-pipe  }
bind-key -T copy-mode    DoubleClick1Pane  select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe
bind-key -T copy-mode-vi DoubleClick1Pane  select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe

bind-key -T root         TripleClick1Pane  select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M  } { copy-mode -H ; send-keys -X select-line ; run-shell -d 0.3 ; send-keys -X copy-pipe  }
bind-key -T copy-mode    TripleClick1Pane  select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe
bind-key -T copy-mode-vi TripleClick1Pane  select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe

# two level mappings (i.e. <prefix>g<key>) for selecting different sessions

################################################################################
# session select
################################################################################

bind-key s switch-client -T session-select

bind-key -T session-select \; split-window '
    find ~/ "!" -path "*/.*/*" -maxdepth 5 -type d |
    fzf |
    cargo \
        --offline \
        --config build.target-dir=\"/tmp/tmux-new-session-target\" \
        run --manifest-path ~/dotfiles/scripts/tmux-new-session/Cargo.toml 2>/dev/null
'
bind-key -T session-select \\ split-window '
    find /mnt/*/code "!" -path "*/.*/*" -maxdepth 5 -type d |
    fzf |
    cargo \
        --offline \
        --config build.target-dir=\"/tmp/tmux-new-session-target\" \
        run --manifest-path ~/dotfiles/scripts/tmux-new-session/Cargo.toml 2>/dev/null
'
bind-key -T session-select s choose-tree -sN
bind-key -T session-select 0 run-shell "~/dotfiles/tmux/goto-ith-session 0"
bind-key -T session-select 1 run-shell "~/dotfiles/tmux/goto-ith-session 1"
bind-key -T session-select 2 run-shell "~/dotfiles/tmux/goto-ith-session 2"
bind-key -T session-select 3 run-shell "~/dotfiles/tmux/goto-ith-session 3"
bind-key -T session-select 4 run-shell "~/dotfiles/tmux/goto-ith-session 4"
bind-key -T session-select 5 run-shell "~/dotfiles/tmux/goto-ith-session 5"
bind-key -T session-select 6 run-shell "~/dotfiles/tmux/goto-ith-session 6"
bind-key -T session-select 7 run-shell "~/dotfiles/tmux/goto-ith-session 7"
bind-key -T session-select 8 run-shell "~/dotfiles/tmux/goto-ith-session 8"
bind-key -T session-select 9 run-shell "~/dotfiles/tmux/goto-ith-session 9"
bind-key -T session-select d\
    if-shell 'tmux has-session -t dots'\
        'new-session -As dots'\
        'new-session -As dots -c ~/dotfiles ; run-shell "~/dotfiles/scripts/tmuxlayout.sh dots"'
bind-key -T session-select m\
    if-shell 'type cmus &> /dev/null'\
        'new-session -As music "~/dotfiles/scripts/start-cmus.sh"'\
        'new-session -As music ; display-message "cmus command not found"'
bind-key -T session-select r\
    if-shell 'type rtorrent &> /dev/null'\
        'new-session -As rtorrent "rtorrent"'\
        'new-session -As rtorrent ; display-message "rtorrent command not found"'
bind-key -T session-select b\
    if-shell '[ -f ~/gotowork.sh ]'\
        'new-session -As bop "~/gotowork.sh"'\
        'new-session -As bop ; display-message "~/gotowork.sh not found"'
bind-key -T session-select t\
    if-shell '[ -f ~/gototsar.sh ]'\
        'new-session -As tsar "~/gototsar.sh"'\
        'new-session -As tsar ; display-message "~/gototsar.sh not found"'
bind-key -T session-select o\
    if-shell '[ -f ~/goto1+.sh ]'\
        'new-session -As 1+ "~/goto1+.sh"'\
        'new-session -As 1+ ; display-message "~/goto1+.sh not found"'
bind-key -T session-select + run-shell 'echo #S > /tmp/tmux-marked-session'
bind-key -T session-select x if-shell\
    'tmux has-session -t $(cat /tmp/tmux-marked-session)'\
    'run-shell "tmux switch-client -t $(cat /tmp/tmux-marked-session)"'\
    'display-message "No selected session, select session with <prefix>g+"'

################################################################################
# clear history
################################################################################

# clear mappings
bind-key c switch-client -T clear

# this is a 2 level mapping because I don't want this happening by mistake
bind-key -T clear  h clear-history;

################################################################################
# open a repl pane
################################################################################

bind-key o switch-client -T open-pane

bind-key -T open-pane p     split-window -v 'ipython3 -i ~/dotfiles/scripts/ipython-preload.py'
bind-key -T open-pane t     split-window -v '
    TMPDIR=$(mktemp -d --suffix=-tarantool);
    cd "$TMPDIR"
    tarantool-pd -i -e "
        box.cfg()
        bit, ffi, fiber = require[[bit]], require[[ffi]], require[[fiber]]
        function hex(num)
            return string.format([[%x]], num)
        end
        require[[console]].start()
    ";
    rm -r "$TMPDIR"
'
bind-key -T open-pane 6     split-window -v 'jupyter-console --kernel=perl6'
bind-key -T open-pane r     split-window -v 'jupyter-console --kernel=rust'
bind-key -T open-pane r     split-window -v 'rlwrap raku || rlwrap perl6'
bind-key -T open-pane n     split-window -v 'node'
bind-key -T open-pane \;    command-prompt 'split-window -v "%%; read _"'

################################################################################
# show key-bindings/options/...
################################################################################

bind-key ? switch-client -T list-what

bind-key -T list-what ? customize-mode -Z
bind-key -T list-what k list-keys
bind-key -T list-what c list-commands
bind-key -T list-what f run-shell tmux-list-formats.sh
bind-key -T list-what o run-shell \
    "echo WINDOW OPTIONS:; echo; tmux show-options -wg; echo; \
     echo SESSION OPTIONS:; echo; tmux show-options -g; echo; \
     echo SERVER OPTIONS:; echo; tmux show-options -sg; echo;"
bind-key -T list-what v display-message -a

################################################################################
# toggle option
################################################################################

bind-key ! switch-client -T toggle-option

bind-key -T toggle-option p     set -w pane-border-status
bind-key -T toggle-option s     set -g status

################################################################################
# ps/top current pane
################################################################################

bind-key p switch-client -T ps-pane

bind-key -T ps-pane w run-shell 'tmux-ps-pane.sh -w'
bind-key -T ps-pane l run-shell 'tmux-ps-pane.sh -l'
bind-key -T ps-pane v run-shell 'tmux-ps-pane.sh -v'
